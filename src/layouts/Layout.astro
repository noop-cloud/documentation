---
import Navigation from '../components/Navigation.astro'
import ContentNavigation from '../components/ContentNavigation.astro'
import VideoWalkthrough from '../components/VideoWalkthrough.astro'
import Footer from '../components/Footer.astro'
import QuickLinks from '../components/QuickLinks.astro'
import Search from "../components/Search.astro"

export interface Props {
  title: string;
}

const { data = {} } = Astro.props
---

<!DOCTYPE html>
<html lang="en" class="h-full bg-black text-white">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" href="/assets/public/noop-logo-plain-icon.png" />
    <link rel="stylesheet" type="text/css" href="/assets/docs/styles.css" />
    <meta name="robots" content="index, follow">
    <meta name="description" content={data.description} />

    <meta property="og:title" content={`Noop Developer Docs: ${data.title}`}>
    <meta property="og:description" content={data.description}>
    <meta property="og:url" content={Astro.url.pathname}>
    <meta property="og:image" content={data.image}>

    <title>{`Noop Docs ${data.title ? ': ' + data.title : ''}`}</title>


    <!-- Deal with FOUC https://medium.com/@fbnlsr/how-to-get-rid-of-the-flash-of-unstyled-content-d6b79bf5d75f -->
    <style>body { visibility: hidden; }</style>
    <noscript><style>body { visibility: visible; }</style></noscript>
    <script>
     // Helper function
     let domReady = (cb) => {
       document.readyState === 'interactive' || document.readyState === 'complete'
       ? cb()
       : document.addEventListener('DOMContentLoaded', cb);
     };

     domReady(() => {
       // Display body when DOM is loaded
       document.body.style.visibility = 'visible';
     });
    </script>


    <script async>
     const persistence = (window.localStorage.getItem('NOOP_COOKIE_CONSENT') === 'ACCEPT') || window.localStorage.getItem('NOOP_IDENTITY')
       ? 'localStorage+cookie'
       : 'memory'

     let guestId = window.localStorage.getItem('NOOP_GUEST')
     if (!guestId) guestId = window.localStorage.getItem('NOOP_PH_UID')
     if (!guestId) guestId = `/guests/${window.crypto.getRandomValues(new Uint32Array(1))[0]}`
     window.localStorage.setItem('NOOP_GUEST', guestId)
     window.localStorage.setItem('NOOP_PH_UID', guestId)

     const identityId = window.localStorage.getItem('NOOP_IDENTITY')

     const distinctID = identityId || guestId
    
     const config = {
       api_host:'https://us.i.posthog.com',
       persistence,
       bootstrap: { distinctID, isIdentifiedID: true },
       loaded: posthog => {
         posthog.identify(...[distinctID, identityId ? { personId: identityId } : null].filter(Boolean))
         if (distinctID !== guestId) {
           posthog.capture('$merge_dangerously', { alias: guestId })
         }
       }
     }

     !function(t,e){var o,n,p,r;e.__SV||(window.posthog=e,e._i=[],e.init=function(i,s,a){function g(t,e){var o=e.split(".");2==o.length&&(t=t[o[0]],e=o[1]),t[e]=function(){t.push([e].concat(Array.prototype.slice.call(arguments,0)))}}(p=t.createElement("script")).type="text/javascript",p.async=!0,p.src=s.api_host+"/static/array.js",(r=t.getElementsByTagName("script")[0]).parentNode.insertBefore(p,r);var u=e;for(void 0!==a?u=e[a]=[]:a="posthog",u.people=u.people||[],u.toString=function(t){var e="posthog";return"posthog"!==a&&(e+="."+a),t||(e+=" (stub)"),e},u.people.toString=function(){return u.toString(1)+".people (stub)"},o="capture identify alias people.set people.set_once set_config register register_once unregister opt_out_capturing has_opted_out_capturing opt_in_capturing reset isFeatureEnabled onFeatureFlags getFeatureFlag getFeatureFlagPayload reloadFeatureFlags group updateEarlyAccessFeatureEnrollment getEarlyAccessFeatures getActiveMatchingSurveys getSurveys onSessionId".split(" "),n=0;n<o.length;n++)g(u,o[n]);e._i.push([i,s,a])},e.__SV=1)}(document,window.posthog||[]);
     posthog.init('phc_Kcoobpt8LhiXOQrSOEa7sj74uTbD4VAsaSJSBsNSmf3', config)

    </script>

    <script>
     const intercomScript = () => {
       window.localStorage.removeItem('NOOP_INTERCOM_REDIRECT')

       // Get metadata from LocalStorage
       let metadataString = window.localStorage.getItem('NOOP_METADATA')
       let metadataParsed = metadataString ? JSON.parse(metadataString) : {}

       let intercomVisible = false
       const intercomString = window.localStorage.getItem('intercom.intercom-state')
       const intercomParsed = intercomString ? JSON.parse(intercomString) : {}
       const openOnBoot = (('openOnBoot' in intercomParsed) && ('type' in intercomParsed.openOnBoot))
       if (openOnBoot) intercomVisible = !!intercomParsed.openOnBoot.type

       // If an Intercom App ID does not exist in metadata then fallback to production App ID
       if (!metadataParsed?.intercomAppId) {
	       metadataParsed = { ...metadataParsed, intercomAppId: 'qncyoyki' }
	       metadataString = JSON.stringify(metadataParsed)
	       window.localStorage.setItem('NOOP_METADATA', metadataString)
       }

       // Load Intercom messenger
       const intercomAppId = metadataParsed?.intercomAppId
       if (intercomAppId) {
	       (function () { const w = window; const ic = w.Intercom; if (typeof ic === 'function') { ic('reattach_activator'); ic('update', w.intercomSettings) } else { const d = document; const i = function () { i.c(arguments) }; i.q = []; i.c = function (args) { i.q.push(args) }; w.Intercom = i; const l = function () { const s = d.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = `https://widget.intercom.io/widget/${intercomAppId}`; const x = d.getElementsByTagName('script')[0]; x.parentNode.insertBefore(s, x) }; if (document.readyState === 'complete') { l() } else if (w.attachEvent) { w.attachEvent('onload', l) } else { w.addEventListener('load', l, false) } } })()
	       window.Intercom('boot', { app_id: intercomAppId, hide_default_launcher: false })
	       window.Intercom('onHide', () => {
		       intercomVisible = false
	       })
	       window.Intercom('onShow', () => {
		       intercomVisible = true
	       })

	       window.addEventListener('storage', (event) => {
		       if ((event.key === 'NOOP_INTERCOM_REDIRECT') && intercomVisible) {
			       const redirect = window.localStorage.getItem('NOOP_INTERCOM_REDIRECT')
			       if (redirect) {
				       if (redirect !== window.location.pathname) window.location.pathname = redirect
				       window.localStorage.removeItem('NOOP_INTERCOM_REDIRECT')
			       }
		       }
	       })
       }
     }

     const loadTrackingScripts = () => {
       intercomScript()
     }

     let cookieConsentTimeout;

     const pollForCookieConsent = () => {
       const cookieConsent = window.localStorage.getItem('NOOP_COOKIE_CONSENT');
       console.log(cookieConsent, 'cookieconsent')
       if (cookieConsent === 'ACCEPT') {
         loadTrackingScripts()
         clearTimeout(cookieConsentTimeout)
       } else if (cookieConsent === 'REJECT') {
         clearTimeout(cookieConsentTimeout)
       } else {
         cookieConsentTimeout = setTimeout(pollForCookieConsent, 1000)
       }
     }


     pollForCookieConsent()
    </script>

  </head>
  <body class="h-full">
    <div class="min-h-full max-w-screen-2xl m-auto  px-4 sm:px-6 lg:px-8">


      <div class="relative isolate bg-black py-10 z-10">

        <div class="mx-auto flex lg:px-8 items-center justify-between">
          <div class="flex h-16 items-center justify-start lg:justify-between flex-1">
            <div class="max-w-2xl flex-shrink-0 lg:mx-0 lg:max-w-xl flex items-center">
              <a class="flex items-center" href="/">
                <span class="sr-only">Noop</span>
                <img class="h-11" src="/assets/docs/noop-logo-plain.svg" alt="Noop">
              </a>
              <a href="/docs/" class="font-sans text-3xl uppercase font-bold text-white pl-4 ml-4 border-l border-lime-500">Docs</a>
              
            </div>
            <div class="flex items-center">
              <a href="/register" id="app-link" class="ml-6 lg:ml-0 px-2 py-1.5 text-xs lg:px-3.5 lg:py-2.5 lg:text-sm font-mono uppercase rounded-md bg-lime-500 text-black ">Log in</a>
            </div>
          </div>

          <div class="lg:hidden">
            <button type="button" id="open-sidebar" class="p-1.5 border border-gray-600 bg-gray-800 rounded text-gray-700">
              <span class="sr-only">Open sidebar</span>
              <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" />
              </svg>
            </button>

            <button type="button" id="close-sidebar" class="p-1.5 border border-gray-600 bg-gray-800 rounded text-gray-700 hidden">
              <span class="sr-only">Close sidebar</span>
              <svg class="h-6 w-6 text-white" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Mobile sidebar content -->
      <div class="absolute left-0 lg:hidden w-full bg-black z-10 p-6 bg-gray-800 hidden" id="mobile-menu">
        <div class="mb-6">
          <Search id="mobile" />
        </div>
        <Navigation />
      </div>

      <div class="grid grid-cols-12 gap-4 px-4 sm:px-6 lg:px-8 py-8">
        <div class="hidden lg:block col-span-3 border-r-8 border-gray-800">
          <div class="sticky top-8">
            <!-- Sidebar left -->
            <div class="mb-6 mr-2">
              <Search id="desktop" />
            </div>
            <Navigation />
          </div>
        </div>
        <slot />
      </div>
    </div>
    <Footer />
  </body>
</html>

<script>
 const openSidebar = document.getElementById('open-sidebar')
 const closeSidebar = document.getElementById('close-sidebar')
 const mobileMenu = document.getElementById('mobile-menu')

 openSidebar.addEventListener('click', () => {
   openSidebar.classList.add('hidden');
   closeSidebar.classList.remove('hidden');

   mobileMenu.classList.remove('hidden');
 })

 closeSidebar.addEventListener('click', () => {
   openSidebar.classList.remove('hidden');
   closeSidebar.classList.add('hidden');
   mobileMenu.classList.add('hidden');
 })
</script>


<style is:global>
/* Subset: Latin1 */
 @font-face {
	 font-family: 'IBM Plex Mono';
	 font-style: normal;
	 font-weight: 700;
	 src: local("IBM Plex Mono Bold"), local("IBMPlexMono-Bold"), url("/assets/docs/fonts/IBMPlexMono-Bold-Latin1.woff2") format("woff2");
	 unicode-range: U+0000, U+000D, U+0020-007E, U+00A0-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2013-2014, U+2018-201A, U+201C-201E, U+2020-2022, U+2026, U+2030, U+2039-203A, U+2044, U+20AC, U+2122, U+2212, U+FB01-FB02
 }
 /* Subset: Latin2 */
 @font-face {
	 font-family: 'IBM Plex Mono';
	 font-style: normal;
	 font-weight: 700;
	 src: local("IBM Plex Mono Bold"), local("IBMPlexMono-Bold"), url("/assets/docs/fonts/IBMPlexMono-Bold-Latin2.woff2") format("woff2");
	 unicode-range: U+0100-0101, U+0104-0130, U+0132-0151, U+0154-017F, U+018F, U+0192, U+01A0-01A1, U+01AF-01B0, U+01FA-01FF, U+0218-021B, U+0237, U+0259, U+1E80-1E85, U+1E9E, U+20A1, U+20A4, U+20A6, U+20A8-20AA, U+20AD-20AE, U+20B1-20B2, U+20B4-20B5, U+20B8-20BA, U+20BD, U+20BF
 }
 /* Subset: Latin3 */
 @font-face {
	 font-family: 'IBM Plex Mono';
	 font-style: normal;
	 font-weight: 700;
	 src: local("IBM Plex Mono Bold"), local("IBMPlexMono-Bold"), url("/assets/docs/fonts/IBMPlexMono-Bold-Latin3.woff2") format("woff2");
	 unicode-range: U+0102-0103, U+01CD-01DC, U+1EA0-1EF9, U+20AB
 }


 /* Subset: Latin1 */
 @font-face {
	 font-family: 'IBM Plex Mono';
	 font-style: normal;
	 font-weight: 400;
	 src: local("IBM Plex Mono"), local("IBMPlexMono"), url("/assets/docs/fonts/IBMPlexMono-Regular-Latin1.woff2") format("woff2");
	 unicode-range: U+0000, U+000D, U+0020-007E, U+00A0-00FF, U+0131, U+0152-0153, U+02C6, U+02DA, U+02DC, U+2013-2014, U+2018-201A, U+201C-201E, U+2020-2022, U+2026, U+2030, U+2039-203A, U+2044, U+20AC, U+2122, U+2212, U+FB01-FB02
 }
 /* Subset: Latin2 */
 @font-face {
	 font-family: 'IBM Plex Mono';
	 font-style: normal;
	 font-weight: 400;
	 src: local("IBM Plex Mono"), local("IBMPlexMono"), url("/assets/docs/fonts/IBMPlexMono-Regular-Latin2.woff2") format("woff2");
	 unicode-range: U+0100-0101, U+0104-0130, U+0132-0151, U+0154-017F, U+018F, U+0192, U+01A0-01A1, U+01AF-01B0, U+01FA-01FF, U+0218-021B, U+0237, U+0259, U+1E80-1E85, U+1E9E, U+20A1, U+20A4, U+20A6, U+20A8-20AA, U+20AD-20AE, U+20B1-20B2, U+20B4-20B5, U+20B8-20BA, U+20BD, U+20BF
 }
 /* Subset: Latin3 */
 @font-face {
	 font-family: 'IBM Plex Mono';
	 font-style: normal;
	 font-weight: 400;
	 src: local("IBM Plex Mono"), local("IBMPlexMono"), url("/assets/docs/fonts/IBMPlexMono-Regular-Latin3.woff2") format("woff2");
	 unicode-range: U+0102-0103, U+01CD-01DC, U+1EA0-1EF9, U+20AB
 }


 @font-face {
   font-family: 'Inter';
   font-style:  normal;
   font-weight: 400;
   font-display: swap;
   src: url("/assets/docs/fonts/Inter-Regular.woff2?v=3.19") format("woff2"),
   url("/assets/docs/fonts/Inter-Regular.woff?v=3.19") format("woff");
 }
 @font-face {
   font-family: 'Inter';
   font-style:  italic;
   font-weight: 400;
   font-display: swap;
   src: url("/assets/docs/fonts/Inter-Italic.woff2?v=3.19") format("woff2"),
   url("/assets/docs/fonts/Inter-Italic.woff?v=3.19") format("woff");
 }

 @font-face {
   font-family: 'Inter';
   font-style:  normal;
   font-weight: 700;
   font-display: swap;
   src: url("/assets/docs/fonts/Inter-Bold.woff2?v=3.19") format("woff2"),
   url("/assets/docs/fonts/Inter-Bold.woff?v=3.19") format("woff");
 }
 @font-face {
   font-family: 'Inter';
   font-style:  italic;
   font-weight: 700;
   font-display: swap;
   src: url("/assets/docs/fonts/Inter-BoldItalic.woff2?v=3.19") format("woff2"),
   url("/assets/docs/fonts/Inter-BoldItalic.woff?v=3.19") format("woff");
 }


 @font-face {
   font-family: 'space-grotesk';
   src: url('/assets/docs/fonts/SpaceGrotesk-Bold.woff2') format('woff2');
   font-weight: bold;
   font-style: normal;
   font-display: swap;
 }


 .hljs {
   display: block;
   overflow-x: auto;
   padding: 0.5em;
 }


 .hljs,
 .hljs-subst {
   color: #fff;
 }

 .hljs-string,
 .hljs-section,
 .hljs-selector-class,
 .hljs-template-variable,
 .hljs-deletion {
   color: rgb(120, 200, 40);
 }

 .prose li p {
   @apply my-0;
 }

</style>



<script>
 const isLoggedIn = localStorage.getItem('NOOP_IDENTITY')
                 && localStorage.getItem('NOOP_SECRET')
                 && localStorage.getItem('NOOP_TOKEN')
 if (isLoggedIn) {
   const appLink = document.getElementById('app-link')
   appLink.href = '/home'
   appLink.text = 'Console'
 }
</script>


<script>
 // TODO: eventually externalize these scripts so that they can get pulled in across docs and public sites
 const intercomScript = () => {
   window.localStorage.removeItem('NOOP_INTERCOM_REDIRECT')

   // Get metadata from LocalStorage
   let metadataString = window.localStorage.getItem('NOOP_METADATA')
   let metadataParsed = metadataString ? JSON.parse(metadataString) : {}

   let intercomVisible = false
   const intercomString = window.localStorage.getItem('intercom.intercom-state')
   const intercomParsed = intercomString ? JSON.parse(intercomString) : {}
   const openOnBoot = (('openOnBoot' in intercomParsed) && ('type' in intercomParsed.openOnBoot))
   if (openOnBoot) intercomVisible = !!intercomParsed.openOnBoot.type

   // If an Intercom App ID does not exist in metadata then fallback to production App ID
   if (!metadataParsed?.intercomAppId) {
	   metadataParsed = { ...metadataParsed, intercomAppId: 'qncyoyki' }
	   metadataString = JSON.stringify(metadataParsed)
	   window.localStorage.setItem('NOOP_METADATA', metadataString)
   }

   // Load Intercom messenger
   const intercomAppId = metadataParsed?.intercomAppId
   if (intercomAppId) {
	   (function () { const w = window; const ic = w.Intercom; if (typeof ic === 'function') { ic('reattach_activator'); ic('update', w.intercomSettings) } else { const d = document; const i = function () { i.c(arguments) }; i.q = []; i.c = function (args) { i.q.push(args) }; w.Intercom = i; const l = function () { const s = d.createElement('script'); s.type = 'text/javascript'; s.async = true; s.src = `https://widget.intercom.io/widget/${intercomAppId}`; const x = d.getElementsByTagName('script')[0]; x.parentNode.insertBefore(s, x) }; if (document.readyState === 'complete') { l() } else if (w.attachEvent) { w.attachEvent('onload', l) } else { w.addEventListener('load', l, false) } } })()
	   window.Intercom('boot', { app_id: intercomAppId, hide_default_launcher: false })
	   window.Intercom('onHide', () => {
		   intercomVisible = false
	   })
	   window.Intercom('onShow', () => {
		   intercomVisible = true
	   })

	   window.addEventListener('storage', (event) => {
		   if ((event.key === 'NOOP_INTERCOM_REDIRECT') && intercomVisible) {
			   const redirect = window.localStorage.getItem('NOOP_INTERCOM_REDIRECT')
			   if (redirect) {
				   if (redirect !== window.location.pathname) window.location.pathname = redirect
				   window.localStorage.removeItem('NOOP_INTERCOM_REDIRECT')
			   }
		   }
	   })
   }
 }

 const loadTrackingScripts = () => {
   intercomScript()
 }

 let cookieConsentTimeout;

 const pollForCookieConsent = () => {
   const cookieConsent = window.localStorage.getItem('NOOP_COOKIE_CONSENT');
   console.log(cookieConsent, 'cookieconsent')
   if (cookieConsent === 'ACCEPT') {
     loadTrackingScripts()
     clearTimeout(cookieConsentTimeout)
   } else if (cookieConsent === 'REJECT') {
     clearTimeout(cookieConsentTimeout)
   } else {
     cookieConsentTimeout = setTimeout(pollForCookieConsent, 1000)
   }
 }


 pollForCookieConsent()
 // Run the check to see if we've received cookie consent, then load scripts


</script>
